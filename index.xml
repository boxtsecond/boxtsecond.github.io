<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Bo&#39;s Blog</title>
        <link>https://boxtsecond.github.io/</link>
        <description>Recent content on Bo&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 23 Aug 2023 14:52:03 +0800</lastBuildDate><atom:link href="https://boxtsecond.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>快速理解网络协议（二）TCP/IP 协议模型</title>
        <link>https://boxtsecond.github.io/2023/%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E4%BA%8Ctcp/ip-%E5%8D%8F%E8%AE%AE%E6%A8%A1%E5%9E%8B/</link>
        <pubDate>Wed, 23 Aug 2023 14:52:03 +0800</pubDate>
        
        <guid>https://boxtsecond.github.io/2023/%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E4%BA%8Ctcp/ip-%E5%8D%8F%E8%AE%AE%E6%A8%A1%E5%9E%8B/</guid>
        <description>&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://boxtsecond.github.io/post/network_protocol/img/ipmac.png&#34; &gt;
		&lt;img src=&#34;https://boxtsecond.github.io/post/network_protocol/img/ipmac.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;总览&#34;
			width=&#34;85%&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;总览&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;tcpip-协议模型&#34;&gt;&lt;strong&gt;TCP/IP 协议模型&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://boxtsecond.github.io/post/network_protocol/img/tcpip.png&#34; &gt;
		&lt;img src=&#34;https://boxtsecond.github.io/post/network_protocol/img/tcpip.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;TCP/IP 协议模型&#34;
			width=&#34;85%&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;TCP/IP 协议模型&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们从下往上依次介绍这些层级，有一个很重要的原因是，&lt;strong&gt;在网络中传输的数据包，会按照这些层级来封装报文，一个数据包只可能有下层没上层，绝不会有上层没下层（这句话要牢牢记住）。&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;层级&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;th&gt;在此层的协议&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;链路层&lt;/td&gt;
&lt;td&gt;负责节点之间数据的传输控制和寻址&lt;/td&gt;
&lt;td&gt;ATM, PPP 等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网络层&lt;/td&gt;
&lt;td&gt;负责数据包的路由和转发&lt;/td&gt;
&lt;td&gt;IP, ICMP, OSPF 等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;传输层&lt;/td&gt;
&lt;td&gt;负责数据端到端之间的具体传输行为控制&lt;/td&gt;
&lt;td&gt;TCP, UDP 等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;应用层&lt;/td&gt;
&lt;td&gt;负责不同应用使用的通信协议的数据封装&lt;/td&gt;
&lt;td&gt;HTTP, SMTP, FTP, DNS, SSH 等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;链路层&#34;&gt;&lt;strong&gt;链路层&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;链路层负责节点之间数据的传输控制和寻址，重点在于&lt;strong&gt;控制和寻址。控制，即谁先发，谁后发，发送时出现问题如何处理，寻址，即如何找到数据包的接收方。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决 “控制” 问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网络中的链路分为两种类型，点对点链路 和 广播链路。点对点链路，由链路一端的单个发送方和链路另一端的单个接收方组成，如 点对点协议（PPP，Point-to-Point Protocol）、高级数据链路控制（HDLC，High-level Data Link Control）。广播链路，能够让多个发送和接收节点都连接到相同的、单一的、共享的广播信道上。很明显，在点对点链路中，由于只有两个节点参与通信，因此不需要进行数据传输的控制，“控制“ 主要解决的问题是如何协调多个发送和接收节点对单一共享广播信道的访问，即**多路访问问题。**为了解决多路访问问题，于是出现了多路访问控制协议，Multiple Access Control 简称 MAC。&lt;/p&gt;
&lt;p&gt;常见的多路访问协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信道划分协议 Channel Partitioning Protocol&lt;/li&gt;
&lt;li&gt;采用多路复用技术，将链路、网络资源（如带宽）划分为“资源片”，将“资源片”分配给各路通信，每路通信独占其分配到的资源片进行通信&lt;/li&gt;
&lt;li&gt;轮转协议 Taking-turns Protocol&lt;/li&gt;
&lt;li&gt;多个节点轮流发送数据&lt;/li&gt;
&lt;li&gt;当只有一个结点活跃时，以信道的全部发送速率 R 发送；当有M个结点活跃时，每个活跃结点的吞吐量接近 R/M&lt;/li&gt;
&lt;li&gt;随机访问协议 Random Access Protocol&lt;/li&gt;
&lt;li&gt;以信道的全部速率发送数据，检测到冲突时通过延时重传等方式恢复&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;以太网使用的方式&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解决 “寻址” 问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里要用到一个物理地址，叫作链路层地址，或 MAC 地址。&lt;strong&gt;MAC 地址用于在网络中唯一标示一个网卡（并不是设备）&lt;/strong&gt;，一台设备若有一或多个网卡，则每个网卡都需要并会有一个唯一的 MAC 地址。&lt;/p&gt;
&lt;p&gt;在此层的头部一般被称为 MAC 头。具体格式如下图橙色部分&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://boxtsecond.github.io/post/network_protocol/img/macheader.png&#34; &gt;
		&lt;img src=&#34;https://boxtsecond.github.io/post/network_protocol/img/macheader.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;MAC 头&#34;
			width=&#34;85%&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;MAC 头&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标 MAC 地址：表示数据包应该被发送到哪个网络设备，由 6 个字节组成&lt;/li&gt;
&lt;li&gt;源 MAC 地址：表示数据包是从哪个网络设备发送的，同样由 6 个字节组成&lt;/li&gt;
&lt;li&gt;类型：表示数据包类型，0800 表示 IP 数据包，0806 表示 ARP 数据包&lt;/li&gt;
&lt;li&gt;数据：实际的数据内容，长度可变&lt;/li&gt;
&lt;li&gt;CRC：Cyclic Redundancy Check 循环冗余检测，通过 XOR 异或的算法，计算整个数据包在发送的过程中是否出现了错误&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;网络层&#34;&gt;&lt;strong&gt;网络层&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;网络层负责数据包的路由和转发，重点在于&lt;strong&gt;路由，即选择合适的路径转发到目标主机。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网络层使用 IP 协议来提供基本的数据传输服务，包括数据包的路由、分组和转发等功能。IP 协议使用 &lt;strong&gt;IP 地址唯一标识网络中的设备&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;IP 地址主要有两个作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定位，即提供设备网络中的“位置”信息&lt;/li&gt;
&lt;li&gt;路由，即数据包选择什么 “路径” 到达目标设备&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在此层的头部一般被称为 IP 头。IPv4 头具体格式如图所示&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://boxtsecond.github.io/post/network_protocol/img/ipheader.png&#34; &gt;
		&lt;img src=&#34;https://boxtsecond.github.io/post/network_protocol/img/ipheader.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;IPv4 头&#34;
			width=&#34;85%&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;IPv4 头&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;IPv4 头&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;版本：指定 IP 协议的版本，4 表示 IPv4，占用 4 bits&lt;/li&gt;
&lt;li&gt;首部长度 IHL：表示 IP 头的长度，占用 4 bits&lt;/li&gt;
&lt;li&gt;区分服务：用于标识网络中不同类型的数据流，只有在使用区分服务时，此字段才有作用，占用 6 bits&lt;/li&gt;
&lt;li&gt;显示拥塞通告：可选功能，在两端都支持且底层网络支持时可被使用，占用 2 bits&lt;/li&gt;
&lt;li&gt;全长：IP 数据报总长度，包括 IP 首部和 IP 数据部分的长度，占用 16 bits&lt;/li&gt;
&lt;li&gt;标识符：唯一标识一个 IP 数据报的所有分片，占用 16 bits&lt;/li&gt;
&lt;li&gt;标志：用于控制和识别报文的分片，占用 3 bits&lt;/li&gt;
&lt;li&gt;分片偏移：用于标识每个分片相对于原始报文开头的偏移量，占用 13 bits&lt;/li&gt;
&lt;li&gt;生存时间：用于防止 IP 数据报在网络中无限循环，作为跳数计数器，每经过一个路由都会减 1，为0时，将丢弃该数据报，占用 8 bits&lt;/li&gt;
&lt;li&gt;协议：表示 IP 数据报中使用的上层协议类型，例如 TCP、UDP 等，占用 8 bits&lt;/li&gt;
&lt;li&gt;首部校验和：用于检验 IP 首部（不包括数据部分）在传输过程中是否有错，占用 16 bits&lt;/li&gt;
&lt;li&gt;源地址：IP 数据报的源地址&lt;/li&gt;
&lt;li&gt;目的地址：IP 数据报的目的地址&lt;/li&gt;
&lt;li&gt;选项：其他附加信息，首部长度必须是 32 的倍数，若不满足则填充 EOL（0x00），直至满足&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;传输层&#34;&gt;&lt;strong&gt;传输层&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;传输层负责数据端到端之间的具体传输行为控制，重点在于&lt;strong&gt;端到端和传送控制。端到端，即将数据具体送达至哪个程序，传送控制，即如何将数据送达到目的地。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传输层上有两个最重要也最常见的协议，TCP 和 UDP，用于端到端的数据传输控制。这两块的内容比较复杂和重要，后面会专门拿出来单独说明，在此就先不赘述了。&lt;/p&gt;
&lt;h3 id=&#34;应用层&#34;&gt;&lt;strong&gt;应用层&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;应用层负责不同应用使用的通信协议的数据封装，重点在于&lt;strong&gt;通信协议的数据封装，即在通信时按照哪种格式如何封装数据。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;应用层上的协议是和我们日常开发息息相关的，比如程序使用 HTTP 协议发送一个 HTTP 请求、使用 SMTP 协议向客户发送一封邮件等等。在应用层上，每个协议的封装和解析是协议特有的，HTTP 协议的数据不能被 SMTP 协议解析。&lt;/p&gt;
&lt;h2 id=&#34;分层的原因&#34;&gt;&lt;strong&gt;分层的原因&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;任何复杂、大型的工程都需要分层来实现模块化，用来降低不同模块之间耦合度，提高模块之间的可替代性和整个工程的复杂度。分层带来的优点有以下几个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;降低不同层级、模块之间的耦合度，提高网络的灵活性。每层的功能和任务清晰且明确，可以分别设计和实现，使得单一协议或模块的开发、维护、升级变得更加容易。&lt;/li&gt;
&lt;li&gt;提高相同层级内模块的可替代性。比如 DNS 协议，既可以使用 TCP 协议又可以使用 UDP 协议作为传输层协议。&lt;/li&gt;
&lt;li&gt;更低的层级可以统一的向上提供服务，比如传输层的 TCP 协议可以为应用层的 HTTP、FTP 协议等提供服务。&lt;/li&gt;
&lt;li&gt;促进了层级和模块的标准化，使得网络在技术和商业上更加开放和透明。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在日常的开发设计中，我们也要将这种分层的思想融入到自己开发的系统中。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;模块化或分层：将系统按照不同的功能和职责进行分层，使系统的各个部分职责清晰、功能单一、易于维护和扩展。&lt;/li&gt;
&lt;li&gt;标准化：遵循接口规范，对不同层之间的数据传输进行约束和规范，从而提高系统的稳定性、可靠性和可维护性。&lt;/li&gt;
&lt;li&gt;可替代性：通过定义接口和协议来约束不同层之间的数据传输，降低模块间的耦合度，提高模块的可替代性。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;小测验&#34;&gt;&lt;strong&gt;小测验&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;TCP/IP 协议模型有几层，它们的作用分别是什么？&lt;/li&gt;
&lt;li&gt;在网络中的数据包，有没有可能有 TCP 头，但是没有 IP 头？如果有的话，举例说明。&lt;/li&gt;
&lt;li&gt;在网络中的数据包，有没有可能有 TCP 头，但是没有 HTTP 头？如果有的话，举例说明。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>快速理解网络协议（一） IP 地址、MAC 地址</title>
        <link>https://boxtsecond.github.io/2023/%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E4%B8%80-ip-%E5%9C%B0%E5%9D%80mac-%E5%9C%B0%E5%9D%80/</link>
        <pubDate>Wed, 23 Aug 2023 14:52:03 +0800</pubDate>
        
        <guid>https://boxtsecond.github.io/2023/%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E4%B8%80-ip-%E5%9C%B0%E5%9D%80mac-%E5%9C%B0%E5%9D%80/</guid>
        <description>&lt;p&gt;快速理解网络协议（一），基础知识的补充&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://boxtsecond.github.io/post/network_protocol/img/ipmac.png&#34; &gt;
		&lt;img src=&#34;https://boxtsecond.github.io/post/network_protocol/img/ipmac.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;总览&#34;
			width=&#34;85%&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;总览&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;ip-地址&#34;&gt;&lt;strong&gt;IP 地址&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;IP 地址中的 “IP” 代表Internet Protocol（互联网协议），IP 地址是在 IP 协议下使用的地址，IP 地址有三个主要功能：&lt;strong&gt;标识设备或网络、定位和选择路由&lt;/strong&gt;。由于 IPv4 是第一个架构中的主要版本，所以在没有特殊说明的时候，IP 地址一般指的是 IPv4 地址。&lt;/p&gt;
&lt;h3 id=&#34;ipv4-地址&#34;&gt;&lt;strong&gt;IPv4 地址&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;一个 IPv4 地址被 “.” 分割成 4 个部分，每个部分 8 个 bit，总共 32 位，使用十进制表示。在设计之初，IPv4 地址被分成 5 类，如下图所示，我们平时接触到的基本是 ABC 三类。一个 IPv4 地址被分为两部分，网络号 + 主机号，这种地址分类的方式叫做&lt;strong&gt;分类网络&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://boxtsecond.github.io/post/network_protocol/img/ipv4.png&#34; &gt;
		&lt;img src=&#34;https://boxtsecond.github.io/post/network_protocol/img/ipv4.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;IPv4地址分类&#34;
			width=&#34;85%&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;IPv4地址分类&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在分类网络中，A、B、C 三类的 IPv4 地址的数量分割一点都不合理，范围跨度太大了。随着互联网的快速发展，CIDR 取代了分类网络。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CIDR （Classless Inter-Domain Routing ）无类别域间路由&lt;/strong&gt;，旨在重新划分地址空间，将地址块可以较为自由合理的分配给用户。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CIDR（“/” 后带着数字这种表示形式，“/” 后）将 32 位的 IP 地址一分为二，网络号 + 主机号，例如 100.100.100.2/24，前 24 位是网络号，后 8 位是主机号&lt;/li&gt;
&lt;li&gt;网络号全为 1 的就是子网掩码，主机号全为 1 的就是广播地址&lt;/li&gt;
&lt;li&gt;将子网掩码和 IP 地址按位计算 AND，可以得到网络号，即&lt;strong&gt;可以判断一个 IP 地址是不是在当前子网内&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt; 100.100.100.2/24&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子网掩码：255.255.255.0&lt;/li&gt;
&lt;li&gt;广播地址：100.100.100.255，所有 100.100.100 网络里面的机器都可以收到&lt;/li&gt;
&lt;li&gt;100.100.100.20 与子网掩码做按位与运算，得到 100.100.100.0，即为网络号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;易错计算：&lt;/strong&gt; 求 16.158.165.91/22 的网络号、第一个地址、子网掩码和广播地址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;16.158.165.91/22 → 16.158. 101001/01. 01011011&lt;/li&gt;
&lt;li&gt;网络号：16.158. 101001/00.0 → 16.158.164.0&lt;/li&gt;
&lt;li&gt;第一个地址：16.158.164.1&lt;/li&gt;
&lt;li&gt;子网掩码：255.255.252.0&lt;/li&gt;
&lt;li&gt;广播地址：16.158.167.255&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常见特殊-ipv4-地址&#34;&gt;&lt;strong&gt;常见特殊 IPv4 地址&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;127.0.0.1 表示本机地址&lt;/li&gt;
&lt;li&gt;0.0.0.0 有两种含义，默认路由地址和通配符地址。默认路由地址我们之后再说。通配符地址指的是，若进程监听了通配符地址，那么进程监听了本机上的所有 IP 地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ipv6-地址&#34;&gt;&lt;strong&gt;IPv6 地址&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;由于互联网的快速兴起，导致 IPv4 地址很快就不够用了，于是出现了 IPv6 地址。一个 IPv6 地址被 “:” 分为 8 个部分，每个部分以 4 位十六进制方式表示，总共 128 位。比如：2001:0db8:85a3:08d3:1319:8a2e:0370:734。&lt;/p&gt;
&lt;p&gt;IPv6 地址和 IPv4 地址相似，也使用网络号 + 主机号的形式划分。一个 IPv4 地址可以很容易的转换成一个 IPv6 地址，如果一个地址是 IPv4 地址，可以直接表示成，::ffff:IPv4地址，比如 ::ffff:192.168.89.9，这种格式叫做**IPv4映射地址。**而::1 类似于 IPv4 中的 127.0.0.1。&lt;/p&gt;
&lt;h3 id=&#34;ip-地址的功能&#34;&gt;&lt;strong&gt;IP 地址的功能&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;标识设备或网络、定位，提供设备在网络中的位置信息&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择路由，在网络传输中，通过 IP 地址选择路由&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;mac-地址&#34;&gt;&lt;strong&gt;MAC 地址&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;和 IP 地址相似，由于此地址作用于 MAC 层，所以称之为 MAC 地址。MAC 地址是指网络设备的硬件地址，是由网络设备的制造商烧录在设备的网卡中的一个&lt;strong&gt;全球唯一&lt;/strong&gt;的地址。类比现实生活的话，IP 地址更像是精确到门牌号的地址信息，而 MAC 地址则是拥有唯一身份证号的“人”。&lt;/p&gt;
&lt;h2 id=&#34;ip-地址-和-mac-地址的区别&#34;&gt;&lt;strong&gt;IP 地址 和 MAC 地址的区别&lt;/strong&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;区别&lt;/th&gt;
&lt;th&gt;IP地址&lt;/th&gt;
&lt;th&gt;MAC地址&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;地址类型&lt;/td&gt;
&lt;td&gt;逻辑地址&lt;/td&gt;
&lt;td&gt;物理地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分配方式&lt;/td&gt;
&lt;td&gt;由运营商分配&lt;/td&gt;
&lt;td&gt;由设备制造商烧录到设备的网卡中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;作用范围&lt;/td&gt;
&lt;td&gt;全球互联网上的通信&lt;/td&gt;
&lt;td&gt;局域网内通信&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;主要功能&lt;/td&gt;
&lt;td&gt;标识设备和选择路由&lt;/td&gt;
&lt;td&gt;唯一标识设备&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;查看-ip-地址mac-地址&#34;&gt;&lt;strong&gt;查看 IP 地址、MAC 地址&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Linux 下使用 ip addr 或 ifconfig，Windows 下使用 ipconfig&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://boxtsecond.github.io/post/network_protocol/img/ifconfig.png&#34; &gt;
		&lt;img src=&#34;https://boxtsecond.github.io/post/network_protocol/img/ifconfig.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;ifconfig&#34;
			width=&#34;85%&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;ifconfig&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“1” 表示 MAC 地址，是一个网卡的物理地址，使用十六进制，6个 byte表示&lt;/li&gt;
&lt;li&gt;“2” 表示 net_device flags，网络设备的状态标识
&lt;ul&gt;
&lt;li&gt;BROADCAST 表示此网卡有广播地址，可以发送广播包&lt;/li&gt;
&lt;li&gt;MULTICAST 表示此网卡可以发送多播包&lt;/li&gt;
&lt;li&gt;UP 表示此网卡处于启动状态&lt;/li&gt;
&lt;li&gt;LOWER_UP 表示 L1 启动，即网线已插入&lt;/li&gt;
&lt;li&gt;mtu 1500 表示最大传输单元 MTU 为 1500，是以太网的默认值，即正文部分不允许超过 1500 个字节&lt;/li&gt;
&lt;li&gt;qdisc，表示 queueing discipline 排队规则，内核通过网络接口发送数据包时，需要按照 qdisc 配置的规则把数据包加入队列
&lt;ul&gt;
&lt;li&gt;mq，是一个虚拟 qdisc，目的是为网络设备的每个硬件队列创建一个 pfifo_fast 队列&lt;/li&gt;
&lt;li&gt;pfifo，不对数据包做任何处理，先入先出&lt;/li&gt;
&lt;li&gt;pfifo_fast，数据包按照服务类型 TOS Type Of Service（ IP 头中的一个字段）分配到不同的波段中，每个波段对应的优先级不同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;小测验&#34;&gt;&lt;strong&gt;小测验&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;如何判断一个 IP 地址是否在子网内？&lt;/li&gt;
&lt;li&gt;IP 地址是逻辑地址还是物理地址？它在网络中的作用是什么？&lt;/li&gt;
&lt;li&gt;IP 地址和 MAC 地址的区别？&lt;/li&gt;
&lt;li&gt;MAC 地址是逻辑地址还是物理地址？它在网络中的作用是什么？&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
