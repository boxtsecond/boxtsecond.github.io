<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>线性表 on Bo&#39;s Blog</title>
        <link>https://boxtsecond.github.io/zh-cn/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/</link>
        <description>Recent content in 线性表 on Bo&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 23 Aug 2023 22:12:18 +0800</lastBuildDate><atom:link href="https://boxtsecond.github.io/zh-cn/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>数据结构（二）线性表 — 栈、队列</title>
        <link>https://boxtsecond.github.io/zh-cn/dev/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BA%8C%E7%BA%BF%E6%80%A7%E8%A1%A8-%E6%A0%88%E9%98%9F%E5%88%97/</link>
        <pubDate>Wed, 23 Aug 2023 22:12:18 +0800</pubDate>
        
        <guid>https://boxtsecond.github.io/zh-cn/dev/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BA%8C%E7%BA%BF%E6%80%A7%E8%A1%A8-%E6%A0%88%E9%98%9F%E5%88%97/</guid>
        <description>&lt;h2 id=&#34;线性表&#34;&gt;线性表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每个线性表上的数据最多只有前和后两个方向，如 数组、链表、队列、栈 等&lt;/li&gt;
&lt;li&gt;非线性表，数据之间不是简单的前后关系，如 二叉树、堆、图 等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;栈-stack&#34;&gt;栈 Stack&lt;/h2&gt;
&lt;h3 id=&#34;栈数据结构的特点&#34;&gt;“栈”数据结构的特点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;后进者先出，先进者后出（类似一堆盘子）&lt;/li&gt;
&lt;li&gt;是一种“操作受限”的线性表（只有 入栈 push、出栈 pop 的操作）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;栈的实现空间复杂度-o1&#34;&gt;栈的实现，空间复杂度 O（1）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;顺序栈，用数组实现的栈
&lt;ul&gt;
&lt;li&gt;出栈操作，时间复杂度 O（1）&lt;/li&gt;
&lt;li&gt;入栈操作，最好情况时间复杂度O（1），最差情况时间复杂度 O（n），均摊时间复杂度 O（1）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;链式栈，用链表实现的栈
&lt;ul&gt;
&lt;li&gt;出栈、入栈操作，时间复杂度 O（1）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;栈的实际应用&#34;&gt;栈的实际应用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;函数调用栈
&lt;ol&gt;
&lt;li&gt;操作系统给每个线程分配一块独立的内存空间，以栈的结构来存储函数调用时的临时变量&lt;/li&gt;
&lt;li&gt;每进入一个函数，将临时变量作为一个栈帧入栈，当被调用函数执行完成后，将这个函数对应的栈帧出栈&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;表达式求值
&lt;ol&gt;
&lt;li&gt;使用两个栈来分别保存，操作数和运算符&lt;/li&gt;
&lt;li&gt;从左向右遍历表达式，当遇到数字时，直接压入操作数栈，遇到运算符时，与运算符的栈顶元素进行比较&lt;/li&gt;
&lt;li&gt;当运算符栈顶的运算符优先级高时，将当前运算符压入栈，当运算符栈顶的运算符优先级低或相同时，从运算符栈中取栈顶运算符，从操作数栈的栈顶取两个操作数，进行计算，并将计算后的结果压入操作数栈&lt;/li&gt;
&lt;li&gt;持续比较，直到结束&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;检验括号匹配
&lt;ol&gt;
&lt;li&gt;从左到右依次扫描字符串，用栈保存未匹配的括号（如，( [ { 等）&lt;/li&gt;
&lt;li&gt;当扫描到需要匹配的括号（如，) ] } 等），则从栈顶取出一个括号，若匹配，则继续，若不匹配，则说明为非法格式&lt;/li&gt;
&lt;li&gt;当所有的括号都扫描完成之后，如果栈为空，则说明字符串为合法格式，否则，说明有未匹配的括号，则为非法格式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;浏览器的前进后退功能
&lt;ol&gt;
&lt;li&gt;使用两个栈 X Y
&lt;ul&gt;
&lt;li&gt;把首次浏览的页面一次压入栈 X&lt;/li&gt;
&lt;li&gt;点击后退时，依次从栈 X 中出栈，并将出栈的数据放入栈 Y，若栈 X 为空，则说明无法后退&lt;/li&gt;
&lt;li&gt;点击前进时，依次从栈 Y 中出栈，并将出栈的数据放入栈 X，若栈 Y 为空，则说明无法前进&lt;/li&gt;
&lt;li&gt;当跳转到新的页面时，则需要清空栈 Y&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用双向链表，使用 prev 和 next 来跳转&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;内存中的堆栈&#34;&gt;内存中的堆栈&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;内存中的堆栈和数据结构中的堆栈不是一个概念，内存中的堆栈是真实存在的物理区，数据结构中的堆栈是抽象的数据存储结构&lt;/li&gt;
&lt;li&gt;内存空间在逻辑上分为三部分：代码区，数据静态区和动态数据区，动态数据区分为 栈区 和 堆区&lt;/li&gt;
&lt;li&gt;代码区：存储方法体的二进制代码，高级调度（作业调度），中级调度（内存调度），低级调度（进程调度）控制代码区执行代码的切换&lt;/li&gt;
&lt;li&gt;静态数据区：存储全局变量、静态变量、常量，常量包括 final 修饰的常量和 String 常量，系统自动分配和回收&lt;/li&gt;
&lt;li&gt;栈区：存储运行方法的形参、局部变量、返回值，由系统自动分配和回收&lt;/li&gt;
&lt;li&gt;堆区：new 一个对象的引用或地址存储在栈区，指向该对象存储在堆区中的真实数据&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;堆和栈的区别和联系&#34;&gt;堆和栈的区别和联系&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;堆和栈都是指内存空间，不同的是，堆是按需申请、动态分配，并且需要手动释放。栈是由系统自动分配，自动释放，当申请内存超过可用内存时，将报异常提示栈溢出&lt;/li&gt;
&lt;li&gt;栈的内存空间是连续的，堆的内存空间则不是。当收到申请空间的请求时，遍历操作系统中记录空闲内存地址的链表，寻找第一个空间大于所申请空间的堆结点，并将此结点从空闲结点链表中删除&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;队列-queue&#34;&gt;队列 Queue&lt;/h2&gt;
&lt;h3 id=&#34;队列数据结构的特点&#34;&gt;“队列”数据结构的特点&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;先进者先出（类似于排队）&lt;/li&gt;
&lt;li&gt;是一种“操作受限”的线性表（只有 入队 enqueue、出队 dequeue 操作）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;队列的实现&#34;&gt;队列的实现&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;顺序队列，用数组实现的队列
&lt;ol&gt;
&lt;li&gt;有两个指针，分别指向 队列头、队列尾&lt;/li&gt;
&lt;li&gt;入队操作，时间复杂度 O（1）
&lt;ul&gt;
&lt;li&gt;由于数组的特性，当队列需要调整长度时，需要数据搬移操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;出队操作，均摊复杂度 O（1）
&lt;ul&gt;
&lt;li&gt;每次出队，需要删除数组的第一个元素，若仍旧需要使队列头指向数组的第一个元素，则需要数据搬移，时间复杂度为 O（n）&lt;/li&gt;
&lt;li&gt;优化：在队列无空闲空间时，触发一次数据的搬移操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;链式队列，用链表实现的队列
&lt;ol&gt;
&lt;li&gt;有两个指针，分别指向队列头、队列尾&lt;/li&gt;
&lt;li&gt;入队操作，时间复杂度 O（1）
&lt;ul&gt;
&lt;li&gt;由于链表的特性，可以实现长度无限的队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;出队操作，时间复杂度 O（1）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;循环队列，队列头、队列尾相连结的队列，一般用数组实现
&lt;ul&gt;
&lt;li&gt;双指针
&lt;ol&gt;
&lt;li&gt;有两个指针，分别指向队列头、队列尾&lt;/li&gt;
&lt;li&gt;入队操作，时间复杂度 O（1）
&lt;ul&gt;
&lt;li&gt;避免了顺序队列的数据搬移工作，循环入队&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;出队操作，时间复杂度 O（1）&lt;/li&gt;
&lt;li&gt;注意事项
&lt;ul&gt;
&lt;li&gt;确定好队空和队满的判定条件，队空 head == tail、队满 （tail + 1）% n = head （head + tail + 1 = n）&lt;/li&gt;
&lt;li&gt;循坏时，头尾指针的位置要取模&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;头指针 + 队列长度
&lt;ol&gt;
&lt;li&gt;入队操作，时间复杂度O（1）&lt;/li&gt;
&lt;li&gt;出队操纵，时间复杂度O（1）&lt;/li&gt;
&lt;li&gt;注意事项
&lt;ul&gt;
&lt;li&gt;确定好队空和队满的判定条件，队空 count == head、队满 count == limit&lt;/li&gt;
&lt;li&gt;循环时，头指针的位置要取模，head = ( head + 1 ) % limit，尾指针，tail = ( head + count ) % limit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;双端循环队列，可以分别从队列头、队列尾执行出队、入队操作
&lt;ol&gt;
&lt;li&gt;在队列中预留一个位置，使用两个指针，分别指向队列头、队列尾的下一个位置&lt;/li&gt;
&lt;li&gt;注意事项：
&lt;ul&gt;
&lt;li&gt;确定好队空和队满的判定条件，队空 head == tail、队满 ( tail + 1 ) % limit == head&lt;/li&gt;
&lt;li&gt;循环时，头尾指针的位置要取模，head = ( head + limit - 1 ) % limit，tail = ( tail + 1 ) % limit&lt;/li&gt;
&lt;li&gt;头指针先取模，再赋值，尾指针先赋值，再取模&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;阻塞队列
&lt;ol&gt;
&lt;li&gt;在队列的基础上增加阻塞操作&lt;/li&gt;
&lt;li&gt;在队列为空时，从队列头取数据会被阻塞，在队列满时，入队操作被阻塞&lt;/li&gt;
&lt;li&gt;生产者 - 消费者模型&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;并发队列
&lt;ol&gt;
&lt;li&gt;线程安全的队列，同一时刻仅允许一个入队或出队操作&lt;/li&gt;
&lt;li&gt;可以使用基于数组的循环队列，利用 CAS 原子操作
&lt;ul&gt;
&lt;li&gt;入队操作，比较入队前和入队时的 tail，若无变化，则允许入队&lt;/li&gt;
&lt;li&gt;出队操作，比较出队前和出队时的 head，若无变化，则允许出队&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>数据结构（一）线性表 — 数组、链表</title>
        <link>https://boxtsecond.github.io/zh-cn/dev/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E7%BA%BF%E6%80%A7%E8%A1%A8-%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/</link>
        <pubDate>Wed, 23 Aug 2023 19:02:18 +0800</pubDate>
        
        <guid>https://boxtsecond.github.io/zh-cn/dev/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E7%BA%BF%E6%80%A7%E8%A1%A8-%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/</guid>
        <description>&lt;h2 id=&#34;线性表&#34;&gt;线性表&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每个线性表上的数据最多只有前和后两个方向，如 数组、链表、队列、栈 等&lt;/li&gt;
&lt;li&gt;非线性表，数据之间不是简单的前后关系，如 二叉树、堆、图 等&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数组-array&#34;&gt;数组 Array&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;线性表数据结构&lt;/li&gt;
&lt;li&gt;连续的内存空间和相同类型的数据
&lt;ul&gt;
&lt;li&gt;利：“随机访问” 的前提条件&lt;/li&gt;
&lt;li&gt;弊：删除、插入操作变得低效，为保证连续性，需要做大量的数据搬移工作&lt;/li&gt;
&lt;li&gt;寻址公式：a[i]_address = base_address + i * data_type_size（为什么数组下标以 0 开始，下标意味着“偏移（offset）”）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;改进数组的插入删除操作&#34;&gt;改进数组的插入、删除操作&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;改进插入操作，插入第 k 个位置的元素
&lt;ul&gt;
&lt;li&gt;普通：k～n 的元素顺序后移一位&lt;/li&gt;
&lt;li&gt;改进：插入第 k 个位置，并直接将第 k 位的数据搬移到数组元素的最后&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改进删除操作，删除第 k 个位置的元素
&lt;ul&gt;
&lt;li&gt;普通：k～n 的元素顺序前移一位&lt;/li&gt;
&lt;li&gt;改进：
&lt;ul&gt;
&lt;li&gt;将多次删除操作集中在一起执行，减少删除操作导致的数据搬移。每次的删除操作并不是真正地删除并搬移数据，而是记录数据已经被删除，当数组没有更多空间存储数据时，触发一次真正的删除操作。（JVM 标记清除垃圾回收算法）&lt;/li&gt;
&lt;li&gt;将最后一位的数据搬移至 k&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;数组的访问越界问题&#34;&gt;数组的访问越界问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;访问数组的本质是访问一段连续内存，只要数组通过偏移计算得到的内存地址是可用的，程序就可能不会报任何的错误&lt;/li&gt;
&lt;li&gt;数组的访问越界问题，和编译器分配内存和字节对齐有关&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;容器和数组的选择&#34;&gt;容器和数组的选择&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;容器可以将很多数组操作的细节封装起来，支持动态扩容&lt;/li&gt;
&lt;li&gt;Java ArrayList，在创建的时候事先指定数据大小&lt;/li&gt;
&lt;li&gt;Java ArrayList 无法存储基本类型，若特别关注性能或只使用基本类型，可以选用数组&lt;/li&gt;
&lt;li&gt;表示多维数组时，使用数组更加直观&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;链表-linked-list&#34;&gt;链表 Linked List&lt;/h2&gt;
&lt;h3 id=&#34;常见的链表结构&#34;&gt;常见的链表结构&lt;/h3&gt;
&lt;h4 id=&#34;单链表&#34;&gt;单链表&lt;/h4&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://boxtsecond.github.io/zh-cn/dev/algorithm/img/single_link_list.jpg&#34; &gt;
		&lt;img src=&#34;https://boxtsecond.github.io/zh-cn/dev/algorithm/img/single_link_list.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;单链表&#34;
			width=&#34;85%&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;单链表&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个结点都有存储数据和记录下一个结点的地址（后继指针 next）&lt;/li&gt;
&lt;li&gt;第一个结点，称作头结点，最后一个结点，称作尾结点，尾结点的 next 指向一个空地址 NULL
&lt;figure 
	&gt;
	&lt;a href=&#34;https://boxtsecond.github.io/zh-cn/dev/algorithm/img/single_link_list.jpg&#34; &gt;
		&lt;img src=&#34;https://boxtsecond.github.io/zh-cn/dev/algorithm/img/single_link_list.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;单链表操作&#34;
			width=&#34;85%&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;单链表操作&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;循环链表&#34;&gt;循环链表&lt;/h4&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://boxtsecond.github.io/zh-cn/dev/algorithm/img/loop_link_list.jpg&#34; &gt;
		&lt;img src=&#34;https://boxtsecond.github.io/zh-cn/dev/algorithm/img/loop_link_list.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;循环链表.jpg&#34;
			width=&#34;85%&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;循环链表.jpg&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;循环链表是一种特殊的单链表，尾结点指针只想链表的头结点&lt;/li&gt;
&lt;li&gt;要处理的数据具有环形结构特点，如 &lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;约瑟夫问题&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;双向链表&#34;&gt;双向链表&lt;/h4&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://boxtsecond.github.io/zh-cn/dev/algorithm/img/two_way_link_list.jpg&#34; &gt;
		&lt;img src=&#34;https://boxtsecond.github.io/zh-cn/dev/algorithm/img/two_way_link_list.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;双向链表&#34;
			width=&#34;85%&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;双向链表&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个结点有一个后继指针 next 指向后面的结点，有一个前驱指针 prev 指向前面的结点，头结点的 prev、尾结点的 next 指向 NULL&lt;/li&gt;
&lt;li&gt;比单链表占用更多的内存空间&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;双向循环链表&#34;&gt;双向循环链表&lt;/h4&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://boxtsecond.github.io/zh-cn/dev/algorithm/img/two_way_loop_link_list.jpg&#34; &gt;
		&lt;img src=&#34;https://boxtsecond.github.io/zh-cn/dev/algorithm/img/two_way_loop_link_list.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;双向循环链表&#34;
			width=&#34;85%&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;双向循环链表&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;双向链表 + 循环链表&lt;/li&gt;
&lt;li&gt;每个结点有一个后继指针 next 指向后面的结点，有一个前驱指针 prev 指向前面的结点，头结点的 prev 指向 尾结点，尾结点的 next 指向 头结点&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;链表的删除操作&#34;&gt;链表的删除操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;删除结点中“值等于某个给定值”的结点，时间复杂度：O（n）
&lt;ol&gt;
&lt;li&gt;从头结点开始，依次遍历对比，直到找到值等于给定值的结点&lt;/li&gt;
&lt;li&gt;删除结点操作&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;删除给定指针指向的结点
&lt;ol&gt;
&lt;li&gt;单链表，时间复杂度：O（n）
&lt;ul&gt;
&lt;li&gt;获取要删除结点的前驱结点，从头结点开始依次遍历&lt;/li&gt;
&lt;li&gt;删除结点操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;双向链表，时间复杂度：O（1）
&lt;ul&gt;
&lt;li&gt;直接获取前驱结点&lt;/li&gt;
&lt;li&gt;删除结点操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;有序链表&#34;&gt;有序链表&lt;/h3&gt;
&lt;p&gt;对于一个有序链表，双向链表的按值查询，可以通过记录上次查找的位置 p，每次查询时，根据要查找的值与 p 的大小关系，决定往前还是往后查找，平均只需要查找一半的数据&lt;/p&gt;
&lt;h3 id=&#34;数组-vs-链表&#34;&gt;数组 VS 链表&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;数组的储存空间是连续的，可以借助 CPU 的缓存机制，预读数组中的数据，链表则不行&lt;/li&gt;
&lt;li&gt;数组的大小是固定的，可能会出现“内存不足”、“重新申请并拷贝操作”（费时），链表没有限制，天然地支持动态扩容&lt;/li&gt;
&lt;li&gt;链表需要储存指针，使用的内存比数组多&lt;/li&gt;
&lt;li&gt;对链表进行频繁的插入、删除操作，会导致频繁的内存申请和释放，容易造成内存碎片（Java 可能会导致频繁 GC）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;链表的应用场景&#34;&gt;链表的应用场景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LRU 缓存淘汰算法（Least Recently Used 最近最少使用）
&lt;ol&gt;
&lt;li&gt;有序单链表，越靠近尾部的结点是越早之前访问的&lt;/li&gt;
&lt;li&gt;有新数据被访问时，从头结点依次遍历&lt;/li&gt;
&lt;li&gt;如果数据已经被缓存在链表中了，找到原本此结点的位置，删除，插入到链表的头部&lt;/li&gt;
&lt;li&gt;如果数据未被缓存，并且缓存未满，则直接插入到链表的头部&lt;/li&gt;
&lt;li&gt;如果数据未被缓存，并且缓存已满，则删除链表的尾结点，并将数据插入到链表的头部&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;判断一个字符串是否是回文字符串
&lt;ul&gt;
&lt;li&gt;快慢指针法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;链表代码实现的技巧&#34;&gt;链表代码实现的技巧&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;理解指针或引用的含义
&lt;ul&gt;
&lt;li&gt;指针：将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;警惕指针丢失和内存泄漏
&lt;ul&gt;
&lt;li&gt;插入结点时，注意操作顺序&lt;/li&gt;
&lt;li&gt;删除结点时，注意内存泄漏问题（手动释放内存空间）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利用哨兵简化难度
&lt;ul&gt;
&lt;li&gt;针对链表的插入、删除操作，需要对插入第一个结点和删除最后一个结点的情况进行特殊处理&lt;/li&gt;
&lt;li&gt;有哨兵结点的链表叫 带头链表，没有哨兵结点的链表叫作 不带头链表
&lt;figure 
	&gt;
	&lt;a href=&#34;https://boxtsecond.github.io/zh-cn/dev/algorithm/img/header_link_list.png&#34; &gt;
		&lt;img src=&#34;https://boxtsecond.github.io/zh-cn/dev/algorithm/img/header_link_list.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;带头链表&#34;
			width=&#34;85%&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;带头链表&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;留意边界条件处理
&lt;ul&gt;
&lt;li&gt;链表为空&lt;/li&gt;
&lt;li&gt;链表只包含一个结点&lt;/li&gt;
&lt;li&gt;链表只包含两个结点&lt;/li&gt;
&lt;li&gt;代码逻辑处理头结点和尾结点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;举例画图，辅助思考&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多写多练！！！&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;链表代码练习&#34;&gt;链表代码练习&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;单链表反转&lt;/li&gt;
&lt;li&gt;链表中环的检测
&lt;ul&gt;
&lt;li&gt;使用快慢指针，时间复杂度O(n)，空间复杂度O(1)。快指针步长两步，慢指针步长一步，若会相遇，则为有环，若快指针遍历完链表，则为无环&lt;/li&gt;
&lt;li&gt;使用集合，时间复杂度O(n)，空间复杂度O(n)。依次遍历链表，若存在相同结点，则为有环，若遍历完链表，则为无环&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;两个有序的链表合并
&lt;ul&gt;
&lt;li&gt;新增头结点，依次比较两个链表的结点，顺序在头结点后连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除链表倒数第 n 个结点
&lt;ul&gt;
&lt;li&gt;先使用快慢指针找到倒数第 n 个结点&lt;/li&gt;
&lt;li&gt;若无第 n 个结点，则删除第一个结点或不执行删除操作&lt;/li&gt;
&lt;li&gt;删除第 n 个结点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;求链表的中间结点
&lt;ul&gt;
&lt;li&gt;使用快慢指针，当快指针指向尾结点时，慢指针指向中间结点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
